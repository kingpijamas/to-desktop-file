#!/bin/bash

## Application defaults
declare -r DEFAULT_ENCODING="UTF-8"
IS_TERMINAL=false
STARTUP_NOTIFY=false
NO_DISPLAY=false
COMMENT="Default auto-generated comment. Please change this in the future."
TYPE="Application"
MAKE_SYMLINK=false
SYMLINK_DIR="/usr/local/bin"

## Implementation-specific vars
declare -a ACCEPTED_INSTALL_DIRECTORIES=( "/opt" "/usr/local" "/usr/bin" "/usr/sbin" "/bin" "/sbin" )
# use BRE escaping here, for these will be used by sed
declare -a EXEC_CODES=( "\%f" "\%F" "\%u" "\%U" "\%d" "\%D" "\%n" "\%N" "\%i" "\%c" "\%k" "\%v" "\%m" )

declare -r DEFAULT_HEADER="[Desktop Entry]\nEncoding=$DEFAULT_ENCODING\n"

# Do NOT change any of these
declare -i EXIT_STATUS=1
declare -i TRUE=0
declare -i FALSE=1

declare APP_NAME
declare INVOCATION_COMMAND
declare ICON
declare EXTRA_CATEGORIES
declare MIME_TYPES
declare BASE_DIR
declare TARGET_FILE
declare BUFFER

#### MAIN EXECUTION FUNCTIONS

main() {
	if ! __parse_args "$@" ; then
		exit $EXIT_STATUS
	fi

	TARGET_FILE="/tmp/$APP_NAME.desktop"

	__append "$DEFAULT_HEADER"
	__append_att_val "Name" "$APP_NAME"
	__append_att_val "Comment" "$COMMENT"
	INVOCATION_COMMAND=$(__if_null_get_default_value "$BASE_DIR/$APP_NAME %u" "$INVOCATION_COMMAND")
	__append_att_val "Exec" "$INVOCATION_COMMAND"
	__append_att_val "Terminal" "$IS_TERMINAL"
	__append_att_val "Type" "$TYPE"
	__append_defaultable_att_val "Icon" "$BASE_DIR/$APP_NAME" "$ICON"
	__append_att_values "Categories" "Application" "$EXTRA_CATEGORIES"
	__append_att_val "StartupNotify" "$STARTUP_NOTIFY"
	__append_optional_att_values "MimeType" "$MIME_TYPES"
	__append_att_val "NoDisplay" "$NO_DISPLAY"

	__print_log
	echo -e "$BUFFER" >> "$TARGET_FILE"

 	sudo desktop-file-install "$TARGET_FILE" && __make_symlink
	rm "$TARGET_FILE"
}

## Creates a symlink in the requested location if MAKE_SYMLINK is true
__make_symlink() {
	if $MAKE_SYMLINK; then
		local prev_dir=$(pwd)
		cd $SYMLINK_DIR
		
		local big_regex=""
		for regex in "${EXEC_CODES[@]}"; do
			big_regex+=" -e s/$regex//g"
		done

		local command=$(echo "$INVOCATION_COMMAND" | sed $big_regex)
		command=$(echo "$command" | sed 's/[ \t]*$//')

		sudo ln -s "$command" "$APP_NAME"
		cd "$prev_dir"
	fi
}

#### PRINTING FUNCTIONS

## Prints the usage string to stderr
usage() {
	local text="Usage: "
	text+=$(basename $0)
	text+=$(__to_usage_opt_string "f" "app-name")
	text+=$(__to_usage_opt_string "c" "comment")
	text+=$(__to_usage_opt_string "e" "invocation-command")
	text+=$(__to_usage_opt_string "T")
	text+=$(__to_usage_opt_string "t" "type")
	text+=$(__to_usage_opt_string "i" "absolute-path-to-icon")
	text+=$(__to_usage_opt_string "k" "extra-categories")
	text+=$(__to_usage_opt_string "L")
	text+=$(__to_usage_opt_string "l" "symlink-location")
	text+=$(__to_usage_opt_string "S")
	text+=$(__to_usage_opt_string "o" "MIME-types-to-open")
	text+=$(__to_usage_opt_string "N")	
	text+=$(__to_usage_opt_string "h")
	text+=" [<arg>]"
	__print_error "$text"
#	echo "$text" 1>&2
}

## Prints a log for the user to see the file they are about to install
__print_log() {
	echo -e "File to install: \n\n$BUFFER\n"
}

## Echoes a String representation for a required parameter's specification
__to_usage_opt_string() {
	local opt=$1;shift
	local arg=$1;shift
	if [ -z $arg ]; then
		echo " [-$opt]"
	else
		echo " [-$opt <$arg>]"
	fi
}

## Prints the parameter to stderr
__print_error() {
	echo "$1" 1>&2
}

#### PARSING FUNCTIONS

## Main parsing function. Returns either TRUE or FALSE depending on the arguments validity.
#  It parses options first, then parses the directory parameter. 
__parse_args() {
	if ! __parse_options "$@" || ! __parse_dir "${!#}"; then
		return $FALSE
	fi
	return $TRUE
}

## Returns either TRUE or FALSE depending on the options' validity
#  (Please note that -h also returns false, since the program
#  should not continue after printing the usage)
__parse_options() {
	while getopts "hLNTSc:e:f:i:k:l:o:t:" opt; do
		case $opt in
		f)	#Set the app name
			APP_NAME=$OPTARG;;
		c)	#Set the comment
			COMMENT=$OPTARG;;
		e)	#Set the command to run the application
			INVOCATION_COMMAND=$OPTARG;;
		T)	#Set the application to show on terminal
			IS_TERMINAL=true;;
		t)	#Add extra types for the application
			TYPE=$OPTARG;;
		i)	#Set the icon
			ICON=$OPTARG;;
		k)	#Set the extra categories for the application
			EXTRA_CATEGORIES=$OPTARG;;
		L)	#Set the program to also make a symlink in the default location
			MAKE_SYMLINK=true;;
		l)	#Set the proram to also make a symlink in $OPTARG
			MAKE_SYMLINK=true
			SYMLINK_DIR=$OPTARG;;					
		S)	#Set the application to notify on startup
			STARTUP_NOTIFY=true;;
		o)	#Set the MimeTypes to be associated with this application
			MIME_TYPES=$OPTARG;;
		N)	#Set the application to not display
			NO_DISPLAY=true;;
		h)	#Prints the help and exits the application
			usage && return $FALSE;;
		:)
			__print_error "Option -$OPTARG requires an argument."
			return $FALSE;;
		\?)
			__print_error "Unknown option: -$OPTARG"
			return $FALSE;;
	  	esac
	done
	return $TRUE
}

## Returns TRUE or FALSE depending on the directory's validity
__parse_dir() {
	BASE_DIR=$1; shift
	if [ ! -d "$BASE_DIR" ]; then
		__print_error "$BASE_DIR is not a directory."
		return $FALSE
	elif [[ "$0" = /* ]]; then
		__print_error "$BASE_DIR is not an absolute path."
		return $FALSE
	elif ! __is_valid_path "$BASE_DIR"; then
		__print_error "$BASE_DIR is not a valid path. (Are you sure you wanted to install '$APP_NAME' there?)."
		return $FALSE
	fi
	return $TRUE
}

## Checks whether the argument is in one of the ACCEPTED_INSTALL_DIRECTORIES.
#  Echoes false if it is not
__is_valid_path() {
	local install_dir=$1
	for possible_start in "${ACCEPTED_INSTALL_DIRECTORIES[@]}"; do
		if [[ "$install_dir" = "$possible_start"/* ]]; then
			return $TRUE
		fi
	done
	return $FALSE
}

#### BUFFER FUNCTIONS

## Appends an attribute with a SINGLE value to the buffer.
__append_att_val() {
	local attribute=$1; shift
	__append "$attribute="
	__append "$1\n"
}

## Appends an attribute with MULTIPLE values
__append_att_values() {
	local attribute=$1; shift
	__append "$attribute="
	__append_values "$@"
}

## Appends an attribute and its MULTIPLE values to the buffer IF the 'values' 
#  (arguments $2 and onwards) are not nil
__append_optional_att_values() {
	local first_value=$2
	if [ $# -gt 1 ] && [ ! -z $first_value ]; then
		__append_att_values "$@"
	fi
}

## Appends an attribute and its SINGLE value to the buffer. If 'value' is
#  nil, then the value to append is considered to be 'default_value'
__append_defaultable_att_val() {
	local attribute=$1;shift
	local default_value=$1;shift
	local value=$1;shift
	
	value=$(__if_null_get_default_value "$default_value" "$value")
		
	__append_att_val "$attribute" "$value"
}

## Appends multiple values to the buffer
__append_values(){
	while [ $# -gt 0 ]
	do
		if [ ! -z "$1" ]; then
			__append "$1;"
		fi
		shift
	done
	__append "\n"
}

## Appends the parameter to the buffer
__append() {
	BUFFER+="$1"
}

## If 'value' is nil, echoes 'default_value'. Else, it echoes 'value'
__if_null_get_default_value() {
	local default_value=$1;shift
	local value=$1;shift
	
	if [ -z "$value" ]; then
		value="$default_value"
	fi
	
	echo "$value"
}

main "$@"
