#!/bin/bash

## defaults
declare -r DEFAULT_ENCODING="UTF-8"
IS_TERMINAL=false
STARTUP_NOTIFY=false
NO_DISPLAY=false
COMMENT="Default auto-generated comment. Please change this in the future."
TYPE="Application"

declare -r DEFAULT_HEADER="[Desktop Entry]\nEncoding=$DEFAULT_ENCODING\n"

## unset-vars
declare APP_NAME
declare INVOKATION_COMMAND
declare ICON
declare EXTRA_CATEGORIES
declare MIME_TYPES

## implementation-specific vars
declare BASE_DIR
declare TARGET_FILE
#The buffer to which all will be written before writing to disk
declare BUFFER
declare -i EXIT_STATUS=1

main() {
	if ! __parse_args "$@" ; then
		exit 1
	fi
	
	echo "$BASE_DIR"
	
	TARGET_FILE="/tmp/$APP_NAME.desktop"
	rm -f $TARGET_FILE
	
	__write "$DEFAULT_HEADER"
	__write_att_val "Name" "$APP_NAME"
	__write_att_val "Comment" "$COMMENT"
	__write_defaultable_att_val "Exec" "$APP_NAME %u" "$INVOKATION_COMMAND"  
	__write_att_val "Terminal" "$IS_TERMINAL"
	__write_defaultable_att_val "Type" "$TYPE"
	__write_defaultable_att_val "Icon" "$BASE_DIR/$APP_NAME" "$ICON"
	__write_att_vals "Categories" "Application" "$EXTRA_CATEGORIES"
	__write_att_val "StartupNotify" "$STARTUP_NOTIFY"
	__write_opt_att_vals "MimeType" "$MIME_TYPES"
	__write_att_val "NoDisplay" "$NO_DISPLAY"

	echo -e "$BUFFER"
	echo -e "$BUFFER" >> $TARGET_FILE

	sudo desktop-file-install $TARGET_FILE
	#rm $TARGET_FILE
}

usage() {
	local text="Usage: "
	text+=$(basename $0)
	text+=$(__to_usage_opt_string "f" "app-name")
	text+=$(__to_usage_opt_string "c" "comment")
	text+=$(__to_usage_opt_string "m" "invokation-command")
	text+=$(__to_usage_opt_string "T" "")
	text+=$(__to_usage_opt_string "t" "type")
	text+=$(__to_usage_opt_string "i" "path-to-icon")
	text+=$(__to_usage_opt_string "k" "extra-categories")
	text+=$(__to_usage_opt_string "S" "")
	text+=$(__to_usage_opt_string "o" "MIME-types-to-open")
	text+=$(__to_usage_opt_string "N" "")	
	text+=$(__to_usage_opt_string "h" "")
	text+=" [<arg>]"
	echo "$text" 1>&2
}

__parse_args() {
	#parsing options
	while getopts f:c:m:t:i:k:o:NTS opt; do
		case $opt in
		f)	#Set the app name
			APP_NAME=$OPTARG;;
		c)	#Set the comment
			COMMENT=$OPTARG;;
		m)	#Set the command to run the application
			INVOKATION_COMMAND=$OPTARG;;
		T)	#Set the application to show on terminal
			IS_TERMINAL=true;;
		t)	#Add extra types for the application
			TYPE=$OPTARG;;
		i)	#Set the icon
			ICON=$OPTARG;;
		k)	#Set the extra categories for the application
			EXTRA_CATEGORIES=$OPTARG;;
		S)	#Set the application to notify on startup
			STARTUP_NOTIFY=true;;
		o)	#Set the MimeTypes to be associated with this application
			MIME_TYPES=$OPTARG;;
		N)	#Set the application to not display
			NO_DISPLAY=true;;
		h)	#Prints the help and exits the application
			usage && return $EXIT_STATUS;;
		:)	
			__print_error "Option -$OPTARG requires an argument."
			return $EXIT_STATUS;;
		\?)
			__print_error "Invalid option: -$OPTARG"
			return $EXIT_STATUS;;
	  	esac
	  	shift;shift
	done

	BASE_DIR="$1"; shift
	if [ ! -d "$BASE_DIR" ]; then
		__print_error "$BASE_DIR is not a directory"
		return $EXIT_STATUS
	fi
}

__to_usage_opt_string() {
	local opt=$1;shift
	local arg=$1;shift
	if [ -z $arg ]; then
		echo " [-$opt]"
	else
		echo " [-$opt <$arg>]"
	fi
}

__print_error() {
	echo "$1" >&2
	usage
}

__write_opt_att_vals() {
	if [ $# -gt 1 ] && [ ! -z $2 ]; then
		__write_att_vals "$@"
	fi
}

__write_defaultable_att_val() {
	local attribute=$1;shift
	local default_value=$1;shift
	local value=$1;shift

	if [ -z $value ]; then
		value="$default_value"
	fi

	__write_att_val "$attribute" "$value"
}

__write_att_val() {
	local attribute=$1; shift
	#writes the attribute
	__write "$attribute="
	__write_val "$1"
}

__write_att_vals() {
	local attribute=$1; shift
	#writes the attribute
	__write "$attribute="
	__write_vals "$@"
}

__write_val(){
	__write "$1\n"
}

##writes the successive semicolon-separated values
__write_vals(){
	while [ $# -gt 0 ]
	do
		if [ ! -z "$1" ]; then
			__write "$1;"
		fi
		shift
	done
	__write "\n"
}

## appends $1 to the buffer
__write() {
	BUFFER+="$1"
}

main "$@"
